{"version":3,"sources":["ui-component/extended/AnimateButton.js","views/utilities/TransferFrom.js"],"names":["AnimateButton","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","TransferFrom","useState","fromAddress","setFromAddress","receiverAddress","setReceiverAddress","transferAmount","setTransferAmount","account","useSelector","state","title","container","spacing","gridSpacing","item","xs","sm","md","lg","fullWidth","htmlFor","id","name","onChange","event","target","value","label","disableElevation","size","variant","color","onClick","accountAddress","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","tokenContract","Contract","tokenContractAddress","tokenAbi","parseFloat","match","alert","amount","utils","parseUnits","transferFrom","then","console","log","catch","err","data","message"],"mappings":"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","file":"static/js/10.98cbf4eb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n// third-party\nimport { motion, useCycle } from 'framer-motion';\n\n// ==============================|| ANIMATION BUTTON ||============================== //\n\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\n    let offset1;\n    let offset2;\n    switch (direction) {\n        case 'up':\n        case 'left':\n            offset1 = offset;\n            offset2 = 0;\n            break;\n        case 'right':\n        case 'down':\n        default:\n            offset1 = 0;\n            offset2 = offset;\n            break;\n    }\n\n    const [x, cycleX] = useCycle(offset1, offset2);\n    const [y, cycleY] = useCycle(offset1, offset2);\n\n    switch (type) {\n        case 'rotate':\n            return (\n                <motion.div\n                    ref={ref}\n                    animate={{ rotate: 360 }}\n                    transition={{\n                        repeat: Infinity,\n                        repeatType: 'loop',\n                        duration: 2,\n                        repeatDelay: 0\n                    }}\n                >\n                    {children}\n                </motion.div>\n            );\n        case 'slide':\n            if (direction === 'up' || direction === 'down') {\n                return (\n                    <motion.div\n                        ref={ref}\n                        animate={{ y: y !== undefined ? y : '' }}\n                        onHoverEnd={() => cycleY()}\n                        onHoverStart={() => cycleY()}\n                    >\n                        {children}\n                    </motion.div>\n                );\n            }\n            return (\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n                    {children}\n                </motion.div>\n            );\n\n        case 'scale':\n        default:\n            if (typeof scale === 'number') {\n                scale = {\n                    hover: scale,\n                    tap: scale\n                };\n            }\n            return (\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n                    {children}\n                </motion.div>\n            );\n    }\n});\n\nAnimateButton.propTypes = {\n    children: PropTypes.node,\n    offset: PropTypes.number,\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\n};\n\nAnimateButton.defaultProps = {\n    type: 'scale',\n    offset: 10,\n    direction: 'right',\n    scale: {\n        hover: 1,\n        tap: 0.9\n    }\n};\n\nexport default AnimateButton;\n","// import web3 stuff\nimport { tokenContractAddress } from 'store/constant';\nimport { tokenAbi } from 'store/constant';\nimport { ethers } from \"ethers\";\n\nimport { Grid } from '@mui/material';\n\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport { InputLabel, OutlinedInput, FormControl, Button } from '@mui/material'\nimport AnimateButton from 'ui-component/extended/AnimateButton';\n\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst TransferFrom = () => {\n\n    const [fromAddress, setFromAddress] = useState(\"\");\n    const [receiverAddress, setReceiverAddress] = useState(\"\");\n    const [transferAmount, setTransferAmount] = useState(\"\");\n    const account = useSelector((state) => state.account);\n\n    const handleFromAddressChange = (event) => {\n        setFromAddress(event.target.value);\n    }\n\n    const handleAddressChange = (event) => {\n        setReceiverAddress(event.target.value);\n    }\n\n    const handleAmountChange = (event) => {\n        setTransferAmount(event.target.value);\n    }\n\n    const isFloat = (n) => {\n        return parseFloat(n.match(/^-?\\d*(\\.\\d+)?$/))>=0;\n    }\n\n    const sendTransferFrom = () => {\n        if( account.accountAddress ) {\n            const provider = new ethers.providers.Web3Provider( window.ethereum );\n            const signer = provider.getSigner();\n            const tokenContract = new ethers.Contract( tokenContractAddress, tokenAbi, signer);\n            if ( !isFloat( transferAmount ) ){\n                alert(\"Input must be a float greater than 0 e.g. 0.01\");\n                return false;\n            }\n            const amount = ethers.utils.parseUnits(transferAmount, 18);\n            tokenContract.transferFrom(fromAddress, receiverAddress, amount)\n                .then(console.log)\n                .catch((err) => alert(err.data.message));\n        }\n        else {\n            alert(\"You must first sign in!\");\n        }\n\n    }\n\n    return (\n        <MainCard title=\"Transfer RTS\">\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={0} sm={0} md={4} lg={4}/>\n                <Grid item xs={12} sm={12} md={4} lg={4}>\n                    {/* <SubCard title=\"Transfer\"> */}\n                        <Grid container direction=\"column\" spacing={1}>\n                            <Grid item>\n                                <FormControl fullWidth>\n                                    <InputLabel htmlFor=\"outlined-adornment-transfer-from-account\">From Address</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-transfer-from-account\"\n                                        type=\"string\"\n                                        name=\"transfer-from-account\"\n                                        onChange={handleFromAddressChange}\n                                        label=\"From Address\"\n                                    />\n                                </FormControl>\n                            </Grid>\n                            <Grid item>\n                                <FormControl fullWidth>\n                                    <InputLabel htmlFor=\"outlined-adornment-transfer-account\">To Address</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-transfer-account\"\n                                        type=\"string\"\n                                        name=\"transfer-account\"\n                                        onChange={handleAddressChange}\n                                        label=\"To Address\"\n                                    />\n                                </FormControl>\n                            </Grid>\n                            <Grid item>\n                                <FormControl fullWidth>\n                                    <InputLabel htmlFor=\"outlined-adornment-transfer-amount\">Amount</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-transfer-amount\"\n                                        type=\"string\"\n                                        name=\"transfer-amount\"\n                                        onChange={handleAmountChange}\n                                        label=\"Amount\"\n                                    />\n                                </FormControl>\n                            </Grid>\n                            <Grid item>\n                                <AnimateButton>\n                                    <Button\n                                        disableElevation\n                                        fullWidth\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                        onClick={sendTransferFrom}\n                                    >\n                                        Send\n                                    </Button>\n                                </AnimateButton>\n                            </Grid>\n                        </Grid>\n                    {/* </SubCard> */}\n                </Grid>\n                <Grid item xs={0} sm={0} md={4} lg={4}/>\n            </Grid>\n        </MainCard>\n    );\n}\n\nexport default TransferFrom;\n"],"sourceRoot":""}