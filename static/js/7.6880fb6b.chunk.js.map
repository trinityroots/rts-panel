{"version":3,"sources":["ui-component/cards/SubCard.js","ui-component/extended/AnimateButton.js","views/utilities/AccessControl.js"],"names":["SubCard","forwardRef","ref","children","content","contentClass","darkTitle","secondary","sx","contentSX","title","others","theme","useTheme","border","borderColor","palette","primary","light","boxShadow","p","variant","action","opacity","className","defaultProps","AnimateButton","offset1","offset2","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","AccessControl","useState","receiverAddress","setReceiverAddress","role","setRole","checkedRevoke","setCheckedRevoke","account","useSelector","state","container","spacing","gridSpacing","item","xs","sm","md","lg","fullWidth","htmlFor","id","name","onChange","event","target","value","label","control","checked","color","onClick","accountAddress","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","tokenContract","Contract","tokenContractAddress","tokenAbi","revokeRole","then","console","log","catch","err","alert","data","message","grantRole","disableElevation","size"],"mappings":"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","file":"static/js/7.6880fb6b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// ==============================|| CUSTOM SUB CARD ||============================== //\n\nconst SubCard = forwardRef(({ children, content, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }, ref) => {\n    const theme = useTheme();\n\n    return (\n        <Card\n            ref={ref}\n            sx={{\n                border: '1px solid',\n                borderColor: theme.palette.primary.light,\n                ':hover': {\n                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)'\n                },\n                ...sx\n            }}\n            {...others}\n        >\n            {/* card header and action */}\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\n\n            {/* content & header divider */}\n            {title && (\n                <Divider\n                    sx={{\n                        opacity: 1,\n                        borderColor: theme.palette.primary.light\n                    }}\n                />\n            )}\n\n            {/* card content */}\n            {content && (\n                <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>\n                    {children}\n                </CardContent>\n            )}\n            {!content && children}\n        </Card>\n    );\n});\n\nSubCard.propTypes = {\n    children: PropTypes.node,\n    content: PropTypes.bool,\n    contentClass: PropTypes.string,\n    darkTitle: PropTypes.bool,\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n    sx: PropTypes.object,\n    contentSX: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nSubCard.defaultProps = {\n    content: true\n};\n\nexport default SubCard;\n","import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n// third-party\nimport { motion, useCycle } from 'framer-motion';\n\n// ==============================|| ANIMATION BUTTON ||============================== //\n\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\n    let offset1;\n    let offset2;\n    switch (direction) {\n        case 'up':\n        case 'left':\n            offset1 = offset;\n            offset2 = 0;\n            break;\n        case 'right':\n        case 'down':\n        default:\n            offset1 = 0;\n            offset2 = offset;\n            break;\n    }\n\n    const [x, cycleX] = useCycle(offset1, offset2);\n    const [y, cycleY] = useCycle(offset1, offset2);\n\n    switch (type) {\n        case 'rotate':\n            return (\n                <motion.div\n                    ref={ref}\n                    animate={{ rotate: 360 }}\n                    transition={{\n                        repeat: Infinity,\n                        repeatType: 'loop',\n                        duration: 2,\n                        repeatDelay: 0\n                    }}\n                >\n                    {children}\n                </motion.div>\n            );\n        case 'slide':\n            if (direction === 'up' || direction === 'down') {\n                return (\n                    <motion.div\n                        ref={ref}\n                        animate={{ y: y !== undefined ? y : '' }}\n                        onHoverEnd={() => cycleY()}\n                        onHoverStart={() => cycleY()}\n                    >\n                        {children}\n                    </motion.div>\n                );\n            }\n            return (\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n                    {children}\n                </motion.div>\n            );\n\n        case 'scale':\n        default:\n            if (typeof scale === 'number') {\n                scale = {\n                    hover: scale,\n                    tap: scale\n                };\n            }\n            return (\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n                    {children}\n                </motion.div>\n            );\n    }\n});\n\nAnimateButton.propTypes = {\n    children: PropTypes.node,\n    offset: PropTypes.number,\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\n};\n\nAnimateButton.defaultProps = {\n    type: 'scale',\n    offset: 10,\n    direction: 'right',\n    scale: {\n        hover: 1,\n        tap: 0.9\n    }\n};\n\nexport default AnimateButton;\n","// import web3 stuff\nimport { tokenContractAddress } from 'store/constant';\nimport { tokenAbi } from 'store/constant';\nimport { ethers } from \"ethers\";\n\nimport { Grid } from '@mui/material';\n\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport MainCard from 'ui-component/cards/MainCard';\nimport { gridSpacing } from 'store/constant';\nimport { FormGroup, Switch, InputLabel, OutlinedInput, FormControl, Button, FormControlLabel } from '@mui/material'\nimport AnimateButton from 'ui-component/extended/AnimateButton';\n\n// ==============================|| TYPOGRAPHY ||============================== //\n\nconst AccessControl = () => { \n    const [receiverAddress, setReceiverAddress] = useState(\"\");\n    const [role, setRole] = useState(\"\");\n    const [checkedRevoke, setCheckedRevoke] = useState(false);\n    const account = useSelector((state) => state.account);\n\n    const handleAddressChange = (event) => {\n        setReceiverAddress(event.target.value);\n    }\n\n    const handleRoleChange = (event) => {\n        setRole(event.target.value);\n    }\n\n    const roleChange = () => {\n        if( account.accountAddress ) {\n            const provider = new ethers.providers.Web3Provider( window.ethereum );\n            const signer = provider.getSigner();\n            const tokenContract = new ethers.Contract( tokenContractAddress, tokenAbi, signer);\n            if ( checkedRevoke ) {\n                tokenContract.revokeRole(role, receiverAddress)\n                    .then(console.log)\n                    .catch((err) => alert(err.data.message));\n            }\n            else {\n                tokenContract.grantRole(role, receiverAddress)\n                    .then(console.log)\n                    .catch((err) => alert(err.data.message));\n            }\n        }\n        else {\n            alert(\"You must first sign in!\");\n        }\n\n    }\n\n    const handleCheck = (event) => {\n        setCheckedRevoke(event.target.checked);\n    }\n\n    return (\n        <MainCard title=\"RTS Access Control\">\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={0} sm={0} md={4} lg={4}/>\n                <Grid item xs={12} sm={12} md={4} lg={4}>\n                    {/* <SubCard title=\"Modify Roles\"> */}\n                        <Grid container direction=\"column\" spacing={1}>\n                            <Grid item>\n                                <FormControl fullWidth>\n                                    <InputLabel htmlFor=\"outlined-adornment-grant-bytes32\">Bytes32 Role</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-grant-bytes32\"\n                                        type=\"string\"\n                                        name=\"grant-bytes-role\"\n                                        onChange={handleRoleChange}\n                                        label=\"Bytes32 Role\"\n                                    />\n                                </FormControl>\n                            </Grid>\n                            <Grid item>\n                                <FormControl fullWidth>\n                                    <InputLabel htmlFor=\"outlined-adornment-grant-account\">Account Address</InputLabel>\n                                    <OutlinedInput\n                                        id=\"outlined-adornment-grant-account\"\n                                        type=\"string\"\n                                        name=\"grant-account\"\n                                        onChange={handleAddressChange}\n                                        label=\"Account Address\"\n                                    />\n                                </FormControl>\n                            </Grid>\n                            <Grid item>\n                                <FormGroup>\n                                    <FormControlLabel control={<Switch   \n                                        checked={checkedRevoke}\n                                        onChange={handleCheck}\n                                        color=\"secondary\"/>\n                                    } label=\"Revoke\" />\n                                </FormGroup>\n                            </Grid>\n                            <Grid item>\n                                <AnimateButton>\n                                    <Button\n                                        onClick={roleChange}\n                                        disableElevation\n                                        fullWidth\n                                        size=\"large\"\n                                        type=\"submit\"\n                                        variant=\"contained\"\n                                        color=\"secondary\"\n                                    >\n                                        Execute\n                                    </Button>\n                                </AnimateButton>\n                            </Grid>\n                        </Grid>\n                    {/* </SubCard> */}\n                </Grid>\n                <Grid item xs={0} sm={0} md={4} lg={4}/>\n            </Grid>\n        </MainCard>\n    );\n}\n\nexport default AccessControl;\n"],"sourceRoot":""}